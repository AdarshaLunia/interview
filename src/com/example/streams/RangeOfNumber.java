package com.example.streams;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class RangeOfNumber {

    public static void main(String a[]) {

        int fromInt = 20;
        int tillLimit = 10;

        System.out.println(forLoopRange(fromInt, tillLimit));

        System.out.println(streamRange(fromInt, tillLimit));
        System.out.println(inclusiveRange(fromInt, tillLimit));
        streamInterator(tillLimit);
        System.out.println("*********");
        streamOddNumList(tillLimit);
        System.out.println("*********");
        skipOps(tillLimit);

        System.out.println("***********");

        int[] arrInt={2,3,5,6,8,9,1};
        String[] arrStr = {"a", "b", "c", "d", "e"};


        //Arrays.stream
        Stream<String> stream1 = Arrays.stream(arrStr);

        stream1.forEach(x->System.out.println(x));


        //Stream.of
        Stream<String> stream2 = Stream.of(arrStr);
        stream2.forEach(x -> System.out.println(x));

        System.out.println("*** Primitive Type Arr ***");

        IntStream intStream=Arrays.stream(arrInt);
        intStream.forEach(x->System.out.println(x));


        // 2. Stream.of -> Stream<int[]>
        Stream<int[]> temp=Stream.of(arrInt);


        // Cant print Stream<int[]> directly, convert / flat it to IntStream
        IntStream tempArr=temp.flatMapToInt(x->Arrays.stream(x));
        tempArr.forEach(z->System.out.println(z));

        System.out.println("*** Boxed ****");

        List<Integer> ints = IntStream.of(1,2,3,4,5)
                .boxed()
                .collect(Collectors.toList());

        System.out.println(ints);


    }



    static List<Integer> forLoopRange(int from, int limit) {

        List<Integer> nums = new ArrayList<>(limit);

        for (int to = from + limit; from < to; ++from) {
            nums.add(from);
        }
        return nums;

    }


    static List<Integer> streamRange(int from, int limit) {
        return IntStream.range(from, from + limit)
                .boxed()
                .collect(Collectors.toList());
    }


    static List<Integer> inclusiveRange(int from, int limit) {
        return IntStream.rangeClosed(from, from + limit)
                .boxed()
                .collect(Collectors.toList());

    }

    static void streamInterator(int limit) {

 /*       The iterate() method takes two arguments: a seed and a function.
          A seed is the first element of the stream. The second element is generated
          by applying the function to the first element.
          The third element is generated by applying the function on the second element.
          Therefore the elements are: seed, f(seed), f(f(seed)), f(f(f(seed)))....
  */

        Stream<Long> tenNaturalNumbers = Stream.iterate(1L, n -> n + 1)
                .limit(limit);
        tenNaturalNumbers.forEach(System.out::println);
    }

    public static boolean isOdd(long number) {
        if (number % 2 == 0) {
            return false;
        }
        return true;
    }

    static void streamOddNumList(int limit) {
        Stream.iterate(2L, n -> n + 1)
                .filter(RangeOfNumber::isOdd)
                .limit(limit)
                .forEach(System.out::println);

    }

    static void skipOps(int limit){
        Stream.iterate(2L, n  ->  n  + 1)
                .filter(RangeOfNumber::isOdd)
                .skip(10)
                .limit(limit)
                .forEach(System.out::println);
    }
}
